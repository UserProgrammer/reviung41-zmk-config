/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 /*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define HYP LS(LC(LA(LGUI)))
#define HYPER(key) LS(LC(LA(LG(key))))
#define MEH LS(LC(LALT))
#define MEH_W(key) LS(LC(LA(key)))

#define BASE 0
#define SYMBOLS 1
#define FUNCTION 2
#define NUMBERS 3
#define MEDIA 4
#define GAMING 5



&mt {
        tapping-term-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp DEL>;
            layers = <0>;
        };
        combo_double {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp DQT>;
            layers = <0>;
        };
        combo_bksp {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp BSPC>;
            layers = <0>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_ret {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RET>;
            layers = <0>;
        };
        
    };
};

/ {
        behaviors {
                gqt: mod-tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "GLOBAL_QUICK_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <250>;
                        quick-tap-ms = <200>;
                        global-quick-tap;
                        bindings = <&kp>, <&kp>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp TAB   &kp Q        &kp W        &kp E       &kp R       &kp T        &kp Y  &kp U &kp I     &kp O     &kp P           &kp RCTRL
   &kp COLON &gqt LCTRL A &gqt LSHFT S &gqt LALT D &gqt LCMD F &gqt HYP G   &kp H  &kp J &kp K     &kp L     &kp SEMI        &kp SQT
   &kp LSHFT &kp Z        &kp X        &kp C       &gqt MEH V  &kp B        &kp N  &kp M &kp COMMA &kp DOT   &kp FSLH        &kp RSHFT
                                &lt MEDIA TAB   &lt FUNCTION ESC   &kp SPACE   &mo SYMBOLS   &mo NUMBERS
                        >;
                };
 
                symbols {
                        bindings = <
   &none &kp EXCL   &kp AT     &kp LBRC  &kp RBRC  &kp PIPE       &kp PLUS  &kp STAR   &kp PRCNT  &none     &none     &none
   &none &kp CARET  &kp DLLR   &kp LPAR  &kp RPAR  &kp GRAVE      &kp UNDER &kp LBRC   &kp RBRC   &kp DQT   &kp SQT   &none
   &none &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp TILDE      &kp AMPS  &kp LT     &kp GT     &kp HASH  &kp BSLH  &none
                                            &none  &none  &kp SPACE  &none  &none
                        >;
                };


                funciton_keys {
                        bindings = <
   &none &kp F1  &kp F2  &kp F3  &kp F4  &kp F5        &kp F6   &kp F6     &kp F8     &kp F9     &kp F10  &none
   &none &none   &none   &none   &none   &kp F11       &kp LEFT &kp DOWN   &kp UP     &kp RIGHT  &none    &none
   &none &none   &none   &none   &none   &kp F12       &none    &kp PG_DN  &kp PG_UP  &none      &none    &to GAMING
                                  &none  &none  &kp SPACE  &none  &none
                        >;
                };

                numbers {
                        bindings = <
   &none &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6   &kp N7    &kp N8  &kp N9     &kp N0   &none
   &none &none   &none   &none   &none   &to 5      &none    &kp N4    &kp N5  &kp N6     &none    &none
   &none &none   &none   &none   &none   &none      &kp N0   &kp N1    &kp N2  &kp N3     &none    &to GAMING
                                &none  &none  &kp SPACE  &none  &none
                        >;
                };


                media_ctrl {
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_TOG    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3   &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &rgb_ug RGB_SPD &none              &kp C_PP     &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE     &none        &out OUT_TOG
   &none           &none           &none           &none           &none           &none              &kp CAPS     &kp C_BRI_DN &kp C_BRI_UP &kp C_BKLT_TOG &kp C_PIP    &to GAMING
                                                             &none      &none       &none        &none      &none
                        >;
                };

                gaming {
                        bindings = <
   &kp N1 &kp TAB   &kp Q &kp W &kp E &kp R      &kp T   &kp N7 &kp N8 &kp N9 &kp N0          &kp BSPC
   &kp N2 &kp LSHFT &kp A &kp S &kp D &kp F      &kp G   &kp N4 &kp N5 &kp N6 &gqt RSHFT SEMI &kp SQT
   &kp N3 &kp LCTRL &kp Z &kp X &kp C &kp V      &kp N0  &kp N1 &kp N2 &kp N3 &gqt RCTRL FSLH &kp RET
                            &mo MEDIA  &kp ESC  &kp SPACE  &to BASE  &to BASE
                        >;
                };
        };
};
